// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source internal/repository/repository.go -destination internal/repository/repository_mock.go
//

// Package mock_repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Dima191/RUTUBE-Task/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Authentication mocks base method.
func (m *MockRepository) Authentication(ctx context.Context, email string) (uint32, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", ctx, email)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authentication indicates an expected call of Authentication.
func (mr *MockRepositoryMockRecorder) Authentication(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockRepository)(nil).Authentication), ctx, email)
}

// CheckSubscription mocks base method.
func (m *MockRepository) CheckSubscription(ctx context.Context, subscriberID, targetID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubscription", ctx, subscriberID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSubscription indicates an expected call of CheckSubscription.
func (mr *MockRepositoryMockRecorder) CheckSubscription(ctx, subscriberID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubscription", reflect.TypeOf((*MockRepository)(nil).CheckSubscription), ctx, subscriberID, targetID)
}

// CloseConnection mocks base method.
func (m *MockRepository) CloseConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection")
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockRepositoryMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockRepository)(nil).CloseConnection))
}

// CreateSession mocks base method.
func (m *MockRepository) CreateSession(ctx context.Context, employeeID uint32, session models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, employeeID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryMockRecorder) CreateSession(ctx, employeeID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepository)(nil).CreateSession), ctx, employeeID, session)
}

// EmployeeByID mocks base method.
func (m *MockRepository) EmployeeByID(ctx context.Context, employeeID uint32) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmployeeByID", ctx, employeeID)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmployeeByID indicates an expected call of EmployeeByID.
func (mr *MockRepositoryMockRecorder) EmployeeByID(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmployeeByID", reflect.TypeOf((*MockRepository)(nil).EmployeeByID), ctx, employeeID)
}

// Employees mocks base method.
func (m *MockRepository) Employees(ctx context.Context) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Employees", ctx)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Employees indicates an expected call of Employees.
func (mr *MockRepositoryMockRecorder) Employees(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Employees", reflect.TypeOf((*MockRepository)(nil).Employees), ctx)
}

// LogOut mocks base method.
func (m *MockRepository) LogOut(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockRepositoryMockRecorder) LogOut(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockRepository)(nil).LogOut), ctx, refreshToken)
}

// RefreshTokenExpiration mocks base method.
func (m *MockRepository) RefreshTokenExpiration(ctx context.Context, refreshToken string) (uint32, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokenExpiration", ctx, refreshToken)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokenExpiration indicates an expected call of RefreshTokenExpiration.
func (mr *MockRepositoryMockRecorder) RefreshTokenExpiration(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokenExpiration", reflect.TypeOf((*MockRepository)(nil).RefreshTokenExpiration), ctx, refreshToken)
}

// SignUp mocks base method.
func (m *MockRepository) SignUp(ctx context.Context, employee models.SignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockRepositoryMockRecorder) SignUp(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockRepository)(nil).SignUp), ctx, employee)
}

// Subscribe mocks base method.
func (m *MockRepository) Subscribe(ctx context.Context, subscriberID, targetID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscriberID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRepositoryMockRecorder) Subscribe(ctx, subscriberID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRepository)(nil).Subscribe), ctx, subscriberID, targetID)
}

// Subscriptions mocks base method.
func (m *MockRepository) Subscriptions(ctx context.Context, subscriberID uint32) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscriptions", ctx, subscriberID)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscriptions indicates an expected call of Subscriptions.
func (mr *MockRepositoryMockRecorder) Subscriptions(ctx, subscriberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockRepository)(nil).Subscriptions), ctx, subscriberID)
}

// TodayBirthdays mocks base method.
func (m *MockRepository) TodayBirthdays(ctx context.Context) ([]models.Notify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TodayBirthdays", ctx)
	ret0, _ := ret[0].([]models.Notify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TodayBirthdays indicates an expected call of TodayBirthdays.
func (mr *MockRepositoryMockRecorder) TodayBirthdays(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TodayBirthdays", reflect.TypeOf((*MockRepository)(nil).TodayBirthdays), ctx)
}

// Unsubscribe mocks base method.
func (m *MockRepository) Unsubscribe(ctx context.Context, subscriberID, targetID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, subscriberID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockRepositoryMockRecorder) Unsubscribe(ctx, subscriberID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockRepository)(nil).Unsubscribe), ctx, subscriberID, targetID)
}

// UpdateSession mocks base method.
func (m *MockRepository) UpdateSession(ctx context.Context, employeeID uint32, session models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, employeeID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockRepositoryMockRecorder) UpdateSession(ctx, employeeID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockRepository)(nil).UpdateSession), ctx, employeeID, session)
}
