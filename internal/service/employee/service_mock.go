// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/employee/service.go
//
// Generated by this command:
//
//	mockgen -source internal/service/employee/service.go -destination internal/service/employee/service_mock.go
//

// Package mock_employeesrv is a generated GoMock package.
package employeesrv

import (
	context "context"
	reflect "reflect"

	models "github.com/Dima191/RUTUBE-Task/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// EmployeeByID mocks base method.
func (m *MockService) EmployeeByID(ctx context.Context, employeeID uint32) (models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmployeeByID", ctx, employeeID)
	ret0, _ := ret[0].(models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmployeeByID indicates an expected call of EmployeeByID.
func (mr *MockServiceMockRecorder) EmployeeByID(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmployeeByID", reflect.TypeOf((*MockService)(nil).EmployeeByID), ctx, employeeID)
}

// Employees mocks base method.
func (m *MockService) Employees(ctx context.Context) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Employees", ctx)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Employees indicates an expected call of Employees.
func (mr *MockServiceMockRecorder) Employees(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Employees", reflect.TypeOf((*MockService)(nil).Employees), ctx)
}

// LogOut mocks base method.
func (m *MockService) LogOut(ctx context.Context, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", ctx, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockServiceMockRecorder) LogOut(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockService)(nil).LogOut), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockService) SignIn(ctx context.Context, credentials models.SignIn) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, credentials)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockServiceMockRecorder) SignIn(ctx, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockService)(nil).SignIn), ctx, credentials)
}

// SignUp mocks base method.
func (m *MockService) SignUp(ctx context.Context, employee models.SignUp) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, employee)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockServiceMockRecorder) SignUp(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockService)(nil).SignUp), ctx, employee)
}

// Subscribe mocks base method.
func (m *MockService) Subscribe(ctx context.Context, subscriberID, targetID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subscriberID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockServiceMockRecorder) Subscribe(ctx, subscriberID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockService)(nil).Subscribe), ctx, subscriberID, targetID)
}

// Subscriptions mocks base method.
func (m *MockService) Subscriptions(ctx context.Context, subscriberID uint32) ([]models.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscriptions", ctx, subscriberID)
	ret0, _ := ret[0].([]models.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscriptions indicates an expected call of Subscriptions.
func (mr *MockServiceMockRecorder) Subscriptions(ctx, subscriberID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscriptions", reflect.TypeOf((*MockService)(nil).Subscriptions), ctx, subscriberID)
}

// TodayBirthdays mocks base method.
func (m *MockService) TodayBirthdays(ctx context.Context) ([]models.Notify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TodayBirthdays", ctx)
	ret0, _ := ret[0].([]models.Notify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TodayBirthdays indicates an expected call of TodayBirthdays.
func (mr *MockServiceMockRecorder) TodayBirthdays(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TodayBirthdays", reflect.TypeOf((*MockService)(nil).TodayBirthdays), ctx)
}

// Unsubscribe mocks base method.
func (m *MockService) Unsubscribe(ctx context.Context, subscriberID, targetID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", ctx, subscriberID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockServiceMockRecorder) Unsubscribe(ctx, subscriberID, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockService)(nil).Unsubscribe), ctx, subscriberID, targetID)
}

// UpdateTokens mocks base method.
func (m *MockService) UpdateTokens(ctx context.Context, expiredRefreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokens", ctx, expiredRefreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTokens indicates an expected call of UpdateTokens.
func (mr *MockServiceMockRecorder) UpdateTokens(ctx, expiredRefreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokens", reflect.TypeOf((*MockService)(nil).UpdateTokens), ctx, expiredRefreshToken)
}
