// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/smtp_manager/manager.go
//
// Generated by this command:
//
//	mockgen -source pkg/smtp_manager/manager.go -destination pkg/smtp_manager/mock_manager.go
//

// Package mock_smtpmanager is a generated GoMock package.
package smtpmanager

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockManager) SendMail(to, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", to, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockManagerMockRecorder) SendMail(to, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockManager)(nil).SendMail), to, msg)
}
